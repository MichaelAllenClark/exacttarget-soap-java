/*
 * XML Type:  ImportDefinitionAutoGenerateDestination
 * Namespace: http://exacttarget.com/wsdl/partnerAPI
 * Java type: com.exacttarget.wsdl.partnerapi.ImportDefinitionAutoGenerateDestination
 *
 * Automatically generated - do not modify.
 */
package com.exacttarget.wsdl.partnerapi.impl;
/**
 * An XML ImportDefinitionAutoGenerateDestination(@http://exacttarget.com/wsdl/partnerAPI).
 *
 * This is a complex type.
 */
public class ImportDefinitionAutoGenerateDestinationImpl extends org.apache.xmlbeans.impl.values.XmlComplexContentImpl implements com.exacttarget.wsdl.partnerapi.ImportDefinitionAutoGenerateDestination
{
    
    public ImportDefinitionAutoGenerateDestinationImpl(org.apache.xmlbeans.SchemaType sType)
    {
        super(sType);
    }
    
    private static final javax.xml.namespace.QName DATAEXTENSIONTARGET$0 = 
        new javax.xml.namespace.QName("http://exacttarget.com/wsdl/partnerAPI", "DataExtensionTarget");
    private static final javax.xml.namespace.QName ERRORIFEXISTS$2 = 
        new javax.xml.namespace.QName("http://exacttarget.com/wsdl/partnerAPI", "ErrorIfExists");
    
    
    /**
     * Gets the "DataExtensionTarget" element
     */
    public com.exacttarget.wsdl.partnerapi.DataExtension getDataExtensionTarget()
    {
        synchronized (monitor())
        {
            check_orphaned();
            com.exacttarget.wsdl.partnerapi.DataExtension target = null;
            target = (com.exacttarget.wsdl.partnerapi.DataExtension)get_store().find_element_user(DATAEXTENSIONTARGET$0, 0);
            if (target == null)
            {
                return null;
            }
            return target;
        }
    }
    
    /**
     * Sets the "DataExtensionTarget" element
     */
    public void setDataExtensionTarget(com.exacttarget.wsdl.partnerapi.DataExtension dataExtensionTarget)
    {
        synchronized (monitor())
        {
            check_orphaned();
            com.exacttarget.wsdl.partnerapi.DataExtension target = null;
            target = (com.exacttarget.wsdl.partnerapi.DataExtension)get_store().find_element_user(DATAEXTENSIONTARGET$0, 0);
            if (target == null)
            {
                target = (com.exacttarget.wsdl.partnerapi.DataExtension)get_store().add_element_user(DATAEXTENSIONTARGET$0);
            }
            target.set(dataExtensionTarget);
        }
    }
    
    /**
     * Appends and returns a new empty "DataExtensionTarget" element
     */
    public com.exacttarget.wsdl.partnerapi.DataExtension addNewDataExtensionTarget()
    {
        synchronized (monitor())
        {
            check_orphaned();
            com.exacttarget.wsdl.partnerapi.DataExtension target = null;
            target = (com.exacttarget.wsdl.partnerapi.DataExtension)get_store().add_element_user(DATAEXTENSIONTARGET$0);
            return target;
        }
    }
    
    /**
     * Gets the "ErrorIfExists" element
     */
    public boolean getErrorIfExists()
    {
        synchronized (monitor())
        {
            check_orphaned();
            org.apache.xmlbeans.SimpleValue target = null;
            target = (org.apache.xmlbeans.SimpleValue)get_store().find_element_user(ERRORIFEXISTS$2, 0);
            if (target == null)
            {
                return false;
            }
            return target.getBooleanValue();
        }
    }
    
    /**
     * Gets (as xml) the "ErrorIfExists" element
     */
    public org.apache.xmlbeans.XmlBoolean xgetErrorIfExists()
    {
        synchronized (monitor())
        {
            check_orphaned();
            org.apache.xmlbeans.XmlBoolean target = null;
            target = (org.apache.xmlbeans.XmlBoolean)get_store().find_element_user(ERRORIFEXISTS$2, 0);
            return target;
        }
    }
    
    /**
     * True if has "ErrorIfExists" element
     */
    public boolean isSetErrorIfExists()
    {
        synchronized (monitor())
        {
            check_orphaned();
            return get_store().count_elements(ERRORIFEXISTS$2) != 0;
        }
    }
    
    /**
     * Sets the "ErrorIfExists" element
     */
    public void setErrorIfExists(boolean errorIfExists)
    {
        synchronized (monitor())
        {
            check_orphaned();
            org.apache.xmlbeans.SimpleValue target = null;
            target = (org.apache.xmlbeans.SimpleValue)get_store().find_element_user(ERRORIFEXISTS$2, 0);
            if (target == null)
            {
                target = (org.apache.xmlbeans.SimpleValue)get_store().add_element_user(ERRORIFEXISTS$2);
            }
            target.setBooleanValue(errorIfExists);
        }
    }
    
    /**
     * Sets (as xml) the "ErrorIfExists" element
     */
    public void xsetErrorIfExists(org.apache.xmlbeans.XmlBoolean errorIfExists)
    {
        synchronized (monitor())
        {
            check_orphaned();
            org.apache.xmlbeans.XmlBoolean target = null;
            target = (org.apache.xmlbeans.XmlBoolean)get_store().find_element_user(ERRORIFEXISTS$2, 0);
            if (target == null)
            {
                target = (org.apache.xmlbeans.XmlBoolean)get_store().add_element_user(ERRORIFEXISTS$2);
            }
            target.set(errorIfExists);
        }
    }
    
    /**
     * Unsets the "ErrorIfExists" element
     */
    public void unsetErrorIfExists()
    {
        synchronized (monitor())
        {
            check_orphaned();
            get_store().remove_element(ERRORIFEXISTS$2, 0);
        }
    }
}
